/*INFS2200 SCRIPT */

SET LINE 110;
SET TIMING ON;
COLUMN OWNER FORMAT a20;
COLUMN CONSTRAINT_NAME FORMAT a20;
COLUMN TABLE_NAME FORMAT a20;
SEARCH CONDITION FORMATION a20;
COLUMN INDEX_NAME FORMAT a20;


SELECT CONSTRAINT_NAME, TABLE_NAME, INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMP';
SELECT CONSTRAINT_NAME, TABLE_NAME, INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPT';
SELECT CONSTRAINT_NAME, TABLE_NAME, INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'PURCHASE';
SELECT CONSTRAINT_NAME, TABLE_NAME, INDEX_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'CLIENT';

ALTER TABLE DEPT ADD CONSTRAINT UN_DNAME UNIQUE (DName);
ALTER TABLE PURCHASE MODIFY AMOUNT INT CONSTRAINT CK_AMOUNT NOT NULL;
ALTER TABLE EMP MODIFY ENAME VARCHAR(30) CONSTRAINT CK_ENAME NOT NULL;
ALTER TABLE DEPT MODIFY DNAME VARCHAR(30) CONSTRAINT CK_DNAME NOT NULL;
ALTER TABLE CLIENT MODIFY CNAME VARCHAR(30) CONSTRAINT CK_CNAME NOT NULL;
ALTER TABLE PURCHASE MODIFY RECEIPTNO INT CONSTRAINT CK_RECEIPTNO NOT NULL;
 
ALTER TABLE PURCHASE ADD CONSTRAINT CK_SERVICETYPE 
CHECK (ServiceType IN ('Training', 'Data Recovery', 'Consultation', 
'Software Installation', 'Software Repair'));
 
ALTER TABLE PURCHASE ADD CONSTRAINT CK_PAYMENTTYPE 
CHECK (PaymentType IN ('Debit', 'Cash', 'Credit'));
 
ALTER TABLE PURCHASE ADD CONSTRAINT CK_GST 
CHECK (GST IN ('Yes', 'No'));
 
ALTER TABLE EMP ADD CONSTRAINT FK_DEPTNO FOREIGN KEY (DeptNo) 
REFERENCES DEPT (DeptNo);
 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_EMPNO FOREIGN KEY (ServedBy) 
REFERENCES EMP (EmpNo);
 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_CLIENTNO FOREIGN KEY (ClientNo) 
REFERENCES CLIENT (ClientNo);

/*2.1*/
CREATE TABLE TOPCOMPANYCLIENT AS
SELECT C.ClientNo AS ClientNumber, C.CName AS ClientName, 
SUM(P.Amount) AS TotalAmount
FROM CLIENT C, PURCHASE P
WHERE C.ClientNo = P.ClientNo
GROUP BY C.ClientNo, C.CName
ORDER BY SUM(P.Amount) DESC
FETCH FIRST 1 ROWS ONLY; 
SELECT * FROM TOPCOMPANYCLIENT;

/*2.2*/
CREATE OR REPLACE TRIGGER TOP_DISCOUNT
BEFORE INSERT ON PURCHASE
FOR EACH ROW
DECLARE 
  ClientID INT;
BEGIN 
SELECT T. ClientNumber INTO ClientID
FROM TOPCOMPANYCLIENT T;
IF :NEW.CLIENTNO = ClientID THEN
:NEW.AMOUNT :=  (0.85 * :NEW.AMOUNT);
END IF;
 END; 
/

/*2.3*/
CREATE OR REPLACE TRIGGER SUNSHINE_DEPT
BEFORE INSERT ON PURCHASE
FOR EACH ROW
DECLARE 
  DepartName VARCHAR(30);
BEGIN 
  SELECT DISTINCT D.DName INTO DepartName
  FROM EMP E, DEPT D, PURCHASE P
  WHERE E.DEPTNO = D.DEPTNO
  AND E.EMPNO = P.SERVEDBY
  AND :NEW.SERVEDBY = P.SERVEDBY;
  
IF DepartName = 'SALES – Sunshine' 
AND :NEW.PAYMENTTYPE != 'Cash' THEN
	:NEW.PAYMENTTYPE := 'Cash';
END IF;
 
IF DepartName = 'SALES – Sunshine' 
AND :NEW.SERVICETYPE = 'Data Recovery' THEN
  	   :NEW.AMOUNT :=  (:NEW.AMOUNT * 0.70);
  END IF;
END; 
/

/*3.1*/
CREATE OR REPLACE VIEW V_DEPT_AMOUNT AS
SELECT D.DEPTNO, D.DNAME, AVG(P.AMOUNT) AS DAVGAMT, MAX(P.AMOUNT) AS DMAXAMT, MIN(P.AMOUNT) AS DMINAMT, SUM(P.AMOUNT) AS DTOTAL
FROM DEPT D, PURCHASE P, EMP E
WHERE E.DEPTNO = D.DEPTNO
AND E.EMPNO = P.SERVEDBY
GROUP BY D.DEPTNO, D.DNAME;


/*3.2*/
CREATE MATERIALIZED VIEW MV_DEPT_AMOUNT 
BUILD IMMEDIATE AS
SELECT D.DEPTNO, D.DNAME, AVG(P.AMOUNT) AS DAVGAMT, MAX(P.AMOUNT) AS DMAXAMT, MIN(P.AMOUNT) AS DMINAMT, SUM(P.AMOUNT) AS DTOTAL
FROM DEPT D, PURCHASE P, EMP E
WHERE E.DEPTNO = D.DEPTNO
AND E.EMPNO = P.SERVEDBY
GROUP BY D.DEPTNO, D.DNAME;

/*3.3*/
EXPLAIN PLAN FOR SELECT * FROM V_DEPT_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

EXPLAIN PLAN FOR SELECT * FROM MV_DEPT_AMOUNT;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);


/*3.4*/

CREATE OR REPLACE VIEW V_DEPT_EMP_AMOUNT AS
SELECT E.EMPNO, D.DEPTNO, COUNT(P.PurchaseNo) AS 
ETOTALPNUM, AVG(P.AMOUNT) AS EAVGPURCH, MAX(P.AMOUNT) AS 
EMAXPURCH, SUM(P.Amount) AS ETOTALSERVED
FROM DEPT D, PURCHASE P, EMP E
WHERE E.DEPTNO = D.DEPTNO
AND E.EMPNO = P.SERVEDBY
GROUP BY E.EMPNO, D.DEPTNO
ORDER BY D.DEPTNO ASC, SUM(P.Amount) DESC;

CREATE MATERIALIZED VIEW MV_DEPT_EMP_AMOUNT 
BUILD IMMEDIATE 
AS
SELECT E.EMPNO, D.DEPTNO, COUNT(P.PurchaseNo) AS 
ETOTALPNUM, AVG(P.AMOUNT) AS EAVGPURCH, MAX(P.AMOUNT) AS 
EMAXPURCH, SUM(P.Amount) AS ETOTALSERVED
FROM DEPT D, PURCHASE P, EMP E
WHERE E.DEPTNO = D.DEPTNO
AND E.EMPNO = P.SERVEDBY
GROUP BY E.EMPNO, D.DEPTNO
ORDER BY SUM(P.Amount) DESC, D.DEPTNO ASC;


/*3.5*/

SELECT * FROM V_DEPT_EMP_AMOUNT;
SELECT * FROM MV_DEPT_EMP_AMOUNT;

/*Task 4 – Indexes:*/

/*4.1*/
SELECT COUNT(*) AS RECEIPT_BOOKS
FROM (SELECT TRUNC(SUBSTR(P2.ReceiptNo, 1, 3)) AS Books,
                (SELECT COUNT(1)
                FROM PURCHASE P
                WHERE TRUNC(SUBSTR(P.ReceiptNo, 1, 3)) = TRUNC(SUBSTR(P2.ReceiptNo, 1, 3))) AS NumOfBooks
FROM PURCHASE P2) Specified
WHERE Specified.NumOfBooks >= 10;  


/*4.2*/
EXPLAIN PLAN FOR SELECT COUNT(*) AS RECEIPT_BOOKS
FROM (SELECT TRUNC(SUBSTR(P2.ReceiptNo, 1, 3)) AS Books,
                (SELECT COUNT(1)
                FROM PURCHASE P
                WHERE TRUNC(SUBSTR(P.ReceiptNo, 1, 3)) = TRUNC(SUBSTR(P2.ReceiptNo, 1, 3))) AS NumOfBooks
FROM PURCHASE P2) Specified
WHERE Specified.NumOfBooks >= 10;


SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
CREATE INDEX BOOK_INDEX ON PURCHASE (TRUNC(SUBSTR(ReceiptNo, 1, 3)));

/*4.3*/

SELECT SUM(TOTAL)
FROM (SELECT P.AMOUNT AS TOTAL
      FROM PURCHASE P, DEPT D, EMP E
      WHERE E.EMPNO = P.SERVEDBY
      AND D.DEPTNO = E.DEPTNO
      AND D.DEPTNO = 50
      AND P.PURCHASENO NOT IN (SELECT P2.PURCHASENO
                               FROM PURCHASE P2
                               WHERE INSTR(P2.ServiceType, 'Software') > 0));

EXPLAIN PLAN FOR SELECT SUM(TOTAL)
FROM (SELECT P.AMOUNT AS TOTAL
      FROM PURCHASE P, DEPT D, EMP E
      WHERE E.EMPNO = P.SERVEDBY
      AND D.DEPTNO = E.DEPTNO
      AND D.DEPTNO = 50
      AND P.PURCHASENO NOT IN (SELECT P2.PURCHASENO
                               FROM PURCHASE P2
                               WHERE INSTR(P2.ServiceType, 'Software') > 0));

SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);


/*4.4*/
CREATE INDEX SERVICE_INDEX ON PURCHASE(INSTR(ServiceType, 'Software'));

/*4.5*/
SELECT SUM(NUMPURCH) AS Number_of_Purchases
FROM (SELECT COUNT(P.PurchaseNo) AS NUMPURCH
      FROM PURCHASE P
      GROUP BY P.ServiceType, P.PaymentType, P.GST
      HAVING COUNT(P.PurchaseNo) >= 1000);


/*Task 5 – Execution Plan:*/
/*5.1*/
EXPLAIN PLAN FOR SELECT *
FROM PURCHASE P
WHERE P.PurchaseNo = 1234;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);


/*5.2*/
ALTER TABLE PURCHASE
DROP CONSTRAINT PK_PURCHASENO;

EXPLAIN PLAN FOR SELECT *
FROM PURCHASE P
WHERE P.PurchaseNo = 1234;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
